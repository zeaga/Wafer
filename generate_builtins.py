#!/usr/bin/env python3

import csv

with open("builtins.tsv", newline="") as csvfile:
	reader = csv.DictReader(csvfile, delimiter="\t")
	builtins = list(reader)

with open("src/builtins_generated.go", "w") as f:
	f.write("// Code generated by generator; edits will not persist\n")
	f.write("package main\n\n")
	f.write("import (\n\t\"math\"\n\t\"strings\"\n)\n\n")
	f.write("var GeneratedBuiltins = []Builtin{\n")

	for b in builtins:
		category = b["category"]
		name = b["name"]
		inputs = b["inputs"]
		outputs = b["outputs"]
		proc = b["definition"]  # <-- no smart parsing, just raw from TSV
		num_inputs = int(inputs[0])
		num_outputs = int(outputs[0])

		inpstr = ", ".join(chr(ord('a')+i) for i in range(num_inputs))
		
		f.write(f'\t{{category: "{category}", name: "{name}", inputs: "{inputs}", outputs: "{outputs}", proc: func(state *EvalState) bool {{\n')

		if num_inputs == 0 and num_outputs == 0:
			if proc:
				f.write(f'\t\t{proc}\n')
			f.write(f'\t\treturn true\n')
		elif num_inputs == 0:
			f.write(f'\t\treturn state.push{outputs}({proc})\n')
		elif num_outputs == 0:
			f.write(f'\t\tif {inpstr}, ok := state.pop{inputs}(); ok {{\n')
			if proc:
				f.write(f'\t\t\t{proc}\n')
			f.write(f'\t\t\treturn true\n')
			f.write(f'\t\t}}\n')
			f.write(f'\t\treturn false\n')
		else:
			f.write(f'\t\tif {inpstr}, ok := state.pop{inputs}(); ok {{\n')
			f.write(f'\t\t\treturn state.push{outputs}({proc})\n')
			f.write(f'\t\t}}\n')
			f.write(f'\t\treturn false\n')
		f.write(f'\t}}}},\n')

	f.write("}\n")